# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

#워크플로우 수행할 이벤트 작성
#main 브랜치를 대상으로 pull request 생성 시 수행됨(push rksmd)로 하고 싶으면 push 쓰면 됨
on:
  pull_request:
    paths: [ cicdtest/** ]
    branches: [ main ]

# 본인이 설정한 값을 여기서 채워넣습니다.
# 리전, 버킷 이름, CodeDeploy 앱 이름, CodeDeploy 배포 그룹 이름
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: keke-aws-s3-bucket
  CODE_DEPLOY_APPLICATION_NAME: keke-codedeploy-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: keke-codedeploy-deployment-group


permissions:
  contents: read

#jobs는 수행할 워크플로우
#어떤 일을 실행할 지 작성하는 부분
jobs:
  #아래 deploy 부분은 job 이름이므로 아무거나 써도 됨
  deploy:
    name: Deploy
    #runs-on : job을 실행할 깃허브 CI서버 OS  << runner라고 부르는 듯
    runs-on: ubuntu-latest
    environment: production

    #steps는 밑으로 하나씩 처리할 일을 순서대로 작성
    steps:
    # 1) 기본 체크아웃
    #워크플로우 실행 전 기본적으로 체크아웃 필요
    #깃허브액션과 연결된 repo 코드를 runner로 옮기는 것
    - name: Checkout
      uses: actions/checkout@v3
      
    # 2) JDK 17 버전 설치, 다른 JDK 버전을 사용한다면 수정 필요
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'zulu'
        
    # (3) Gradle build (Test 제외)    
    # Gradle 사용. arguments 를 붙이면 뒤에 그대로 실행된다고 생각하면 됨
    # 이 워크플로우는 gradle clean build를 수행함, -x test는 test디렉터리는 제외한다는 것
    # build-root-directory는 최상위 위치에서 하위 디렉터리 지정 가능
    # 난 git 상위 디렉터리 이름이 CICD-TEST 이고 SpringBoot 프로젝트는 CICD-TEST/cicdtest 이렇게 되어 있음
    # 결국 gradle 디렉터리 CICD-TEST/cicdtest/gradle에 위치함
    - name: Build with Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        arguments: clean build -x test --parallel
        build-root-directory: cicdtest/
        
    # (4) AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    # (5) 빌드 결과물을 S3 버킷에 업로드
    # working-directory 설정 역시, appspec.yml 파일 위치를 가리키기 위함
    # CICD-TEST/cicdtest/appspec.yml 위치함
    # working-directory를 지정하지 않으면 CICD-TEST/appspec.yml을 가리켜서 ERROR 뜬다.
    - name: Upload to AWS S3
      run: |
        aws deploy push \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --ignore-hidden-files \
          --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
          --source .
      working-directory: cicdtest/

    # (6) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
    - name: Deploy to AWS EC2 from S3
      run: |
        aws deploy create-deployment \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
          --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip
